// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Codemerger_specflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("b_ Hazard_variability")]
    public partial class B_Hazard_VariabilityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Hazard_variability.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "b_ Hazard_variability", @"In this feature , we have all the requirements for testing the hazard_Variability
![Calculator](https://specflow.org/wp-content/uploads/2020/09/calculator.png)
![screenshot](https://dev.azure.com/InsurIQ/c280b3f7-9ae4-45a2-b5fe-9132ba656c59/_apis/wit/attachments/93a0861d-987d-4b81-ada2-4bcf9dacd0f3?fileName=code%20behind%20the%20files.PNG)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Hazrad_Varibility _State Alabama UVA-Basic")]
        [NUnit.Framework.CategoryAttribute("Hazard_Variability_AL")]
        public virtual void Hazrad_Varibility_StateAlabamaUVA_Basic()
        {
            string[] tagsOfScenario = new string[] {
                    "Hazard_Variability_AL"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Hazrad_Varibility _State Alabama UVA-Basic", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
testRunner.Given("User should be successfully logged in the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
testRunner.And("user clicks underwriter.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
testRunner.And("user clicks New RFP.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
testRunner.And("user sets data for the Submission screen viz different sections in the applicatio" +
                        "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "propsed_due_date",
                            "Effective_date"});
                table1.AddRow(new string[] {
                            "2/11/2020",
                            "2/20/2020"});
#line 12
testRunner.And("user fills/picks dates for proposed due date and effective due date", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Policy_holder_name",
                            "DBA",
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "Zip",
                            "Website"});
                table2.AddRow(new string[] {
                            "Automation_toda",
                            "DBA",
                            "House no.10",
                            "Jackson Lane",
                            "Alabama City",
                            "Alabama",
                            "35242",
                            "www.gboiq.com"});
#line 15
testRunner.And("user fills data for Information section as", ((string)(null)), table2, "And ");
#line hidden
#line 18
testRunner.And("conditional to zip should only belong to Alabama", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Name",
                            "Phone",
                            "Email"});
                table3.AddRow(new string[] {
                            "HazardVaraibilty_Alabama",
                            "James Jackson",
                            "0986671666",
                            "Gbo@email.com"});
#line 19
testRunner.And("User fills data for contact information sections as", ((string)(null)), table3, "And ");
#line hidden
#line 22
testRunner.And("conditional to email and website should be of the format acceptable by the system" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Market_Segment",
                            "Available_Form",
                            "Product_Selection",
                            "UPC",
                            "Account_Group_Type"});
                table4.AddRow(new string[] {
                            "Corporate",
                            "U-VA-1001-B",
                            "Basic AD&D",
                            "0866 - CARVEOUT PRINCIPAL",
                            "Employers (employees)"});
#line 23
testRunner.And("user fills data for product selection section as", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "SIC"});
                table5.AddRow(new string[] {
                            "(1100)ANTHRACITE MINING"});
#line 26
testRunner.And("user chooses data for Additional information section as", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "underwriting_Analsyst",
                            "Reg_Distribution_Mgr"});
                table6.AddRow(new string[] {
                            "System User",
                            "S Test"});
#line 29
testRunner.And("user selects Account Representatives as", ((string)(null)), table6, "And ");
#line hidden
#line 32
testRunner.And("user clicks Next button to move to the next page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
